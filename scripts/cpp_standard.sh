#!/bin/bash

# C++ Standard Selection and Configuration Utility
# Auto-generated by cpp-conan-template configure script

set -e

# Source constants if available
if [ -f "scripts/constants.sh" ]; then
    source scripts/constants.sh
else
    # Basic fallback functions
    print_status() { echo "[INFO] $1"; }
    print_error() { echo "[ERROR] $1" >&2; }
    print_warning() { echo "[WARNING] $1"; }
    print_success() { echo "[SUCCESS] $1"; }
    print_header() { echo -e "\n=== $1 ==="; }
fi

# C++ standard information database
declare -A CPP_STANDARDS=(
    ["17"]="C++17 (ISO/IEC 14882:2017)"
    ["20"]="C++20 (ISO/IEC 14882:2020)"
    ["23"]="C++23 (ISO/IEC 14882:2023)"
    ["26"]="C++26 (Planned for 2026)"
)

declare -A CPP_FEATURES=(
    ["17"]="structured_bindings,if_constexpr,fold_expressions,parallel_algorithms"
    ["20"]="concepts,coroutines,modules,ranges,three_way_comparison,consteval"
    ["23"]="deducing_this,multidimensional_subscript,explicit_this,static_call_operator"
    ["26"]="reflection,networking,pattern_matching,contracts"
)

declare -A COMPILER_SUPPORT=(
    ["17"]="GCC 7+, Clang 5+, MSVC 19.14+ (VS 2017 15.7)"
    ["20"]="GCC 10+, Clang 12+, MSVC 19.29+ (VS 2019 16.10)"
    ["23"]="GCC 11+, Clang 14+, MSVC 19.33+ (VS 2022 17.3)"
    ["26"]="GCC 13+, Clang 16+, MSVC 19.40+ (VS 2022 17.10)"
)

show_standard_info() {
    local std="$1"
    
    if [[ -z "${CPP_STANDARDS[$std]}" ]]; then
        print_error "Unsupported C++ standard: $std"
        return 1
    fi
    
    print_header "C++$std Information"
    echo "Standard: ${CPP_STANDARDS[$std]}"
    echo "Compiler Support: ${COMPILER_SUPPORT[$std]}"
    echo ""
    
    echo "Key Features:"
    IFS=',' read -ra FEATURES <<< "${CPP_FEATURES[$std]}"
    for feature in "${FEATURES[@]}"; do
        echo "  • $(echo "$feature" | tr '_' ' ')"
    done
    echo ""
}

check_compiler_support() {
    local std="$1"
    local compiler_found=false
    
    print_header "Checking Compiler Support for C++$std"
    
    # Check GCC
    if command -v gcc >/dev/null 2>&1; then
        local gcc_version=$(gcc -dumpversion | cut -d. -f1)
        local required_gcc=""
        
        case "$std" in
            "17") required_gcc="7" ;;
            "20") required_gcc="10" ;;
            "23") required_gcc="11" ;;
            "26") required_gcc="13" ;;
        esac
        
        if [ "$gcc_version" -ge "$required_gcc" ] 2>/dev/null; then
            print_success "GCC $gcc_version supports C++$std ✓"
            compiler_found=true
        else
            print_warning "GCC $gcc_version - requires GCC $required_gcc+ for C++$std"
        fi
    fi
    
    # Check Clang
    if command -v clang >/dev/null 2>&1; then
        local clang_version=$(clang --version | grep -oE '[0-9]+\.[0-9]+' | head -1 | cut -d. -f1)
        local required_clang=""
        
        case "$std" in
            "17") required_clang="5" ;;
            "20") required_clang="12" ;;
            "23") required_clang="14" ;;
            "26") required_clang="16" ;;
        esac
        
        if [ "$clang_version" -ge "$required_clang" ] 2>/dev/null; then
            print_success "Clang $clang_version supports C++$std ✓"
            compiler_found=true
        else
            print_warning "Clang $clang_version - requires Clang $required_clang+ for C++$std"
        fi
    fi
    
    # Check MSVC (if available)
    if command -v cl >/dev/null 2>&1; then
        print_status "MSVC detected - check Visual Studio version manually"
        print_status "Required: ${COMPILER_SUPPORT[$std]}"
        compiler_found=true
    fi
    
    if ! $compiler_found; then
        print_error "No suitable compiler found for C++$std"
        print_status "Install one of: ${COMPILER_SUPPORT[$std]}"
        return 1
    fi
    
    return 0
}

set_cpp_standard() {
    local std="$1"
    
    if [[ -z "${CPP_STANDARDS[$std]}" ]]; then
        print_error "Unsupported C++ standard: $std"
        print_status "Supported standards: ${!CPP_STANDARDS[*]}"
        return 1
    fi
    
    print_header "Setting C++ Standard to C++$std"
    
    # Check compiler support first
    if ! check_compiler_support "$std"; then
        print_error "Cannot set C++$std - compiler requirements not met"
        return 1
    fi
    
    # Update conanfile.py
    if [ -f "conanfile.py" ]; then
        print_status "Updating conanfile.py default C++ standard..."
        
        # Create backup
        cp conanfile.py conanfile.py.bak
        
        # Update the default_options
        sed -i.tmp "s/\"cxx_standard\": \"[0-9]*\"/\"cxx_standard\": \"$std\"/g" conanfile.py && rm -f conanfile.py.tmp
        
        print_success "Updated conanfile.py default C++ standard to C++$std"
    fi
    
    # Update CMakeLists.txt
    if [ -f "CMakeLists.txt" ]; then
        print_status "Updating CMakeLists.txt default C++ standard..."
        
        # Create backup
        cp CMakeLists.txt CMakeLists.txt.bak
        
        # Update CMAKE_CXX_STANDARD
        sed -i.tmp "s/set(CMAKE_CXX_STANDARD [0-9]*)/set(CMAKE_CXX_STANDARD $std)/g" CMakeLists.txt && rm -f CMakeLists.txt.tmp
        
        print_success "Updated CMakeLists.txt default C++ standard to C++$std"
    fi
    
    # Create .cppstd file for easy reference
    echo "$std" > .cppstd
    print_status "Created .cppstd file with current standard: C++$std"
    
    print_success "C++ standard set to C++$std"
    print_status ""
    print_status "Next steps:"
    print_status "1. Run: ./configure clean"
    print_status "2. Run: ./configure"
    print_status "3. Run: ./make"
    
    show_standard_info "$std"
}

show_current_standard() {
    print_header "Current C++ Standard Configuration"
    
    # Check .cppstd file
    if [ -f ".cppstd" ]; then
        local current_std=$(cat .cppstd)
        print_status "Configured standard: C++$current_std"
        show_standard_info "$current_std"
    fi
    
    # Check conanfile.py
    if [ -f "conanfile.py" ]; then
        local conan_std=$(grep -o '"cxx_standard": "[0-9]*"' conanfile.py | grep -o '[0-9]*' || echo "not set")
        print_status "conanfile.py standard: C++$conan_std"
    fi
    
    # Check CMakeLists.txt
    if [ -f "CMakeLists.txt" ]; then
        local cmake_std=$(grep -o 'CMAKE_CXX_STANDARD [0-9]*' CMakeLists.txt | grep -o '[0-9]*' || echo "not set")
        print_status "CMakeLists.txt standard: C++$cmake_std"
    fi
}

build_with_standard() {
    local std="$1"
    
    print_header "Building with C++$std"
    
    # Set environment variable for this build
    export CXX_STANDARD="$std"
    
    # Build with specified standard
    print_status "Building with C++$std (temporary override)..."
    
    if [ -f "./make" ]; then
        CXX_STANDARD="$std" ./make
    else
        print_error "Make script not found"
        return 1
    fi
}

show_help() {
    print_header "C++ Standard Utility Help"
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  set <std>     Set C++ standard (17, 20, 23, 26)"
    echo "  info <std>    Show information about C++ standard"
    echo "  check <std>   Check compiler support for standard"
    echo "  current       Show current configuration"
    echo "  build <std>   Build with specific standard (temporary)"
    echo "  list          List all supported standards"
    echo ""
    echo "Options:"
    echo "  --help, -h    Show this help"
    echo ""
    echo "Examples:"
    echo "  $0 set 20           # Set project to C++20"
    echo "  $0 info 23          # Show C++23 information"
    echo "  $0 check 26         # Check C++26 compiler support"
    echo "  $0 build 17         # Build temporarily with C++17"
    echo "  $0 current          # Show current configuration"
}

list_standards() {
    print_header "Supported C++ Standards"
    
    for std in "${!CPP_STANDARDS[@]}"; do
        echo "C++$std: ${CPP_STANDARDS[$std]}"
    done | sort -V
    
    echo ""
    print_status "Use '$0 info <standard>' for detailed information"
}

# Main script logic
case "${1:-}" in
    "set")
        if [ -z "$2" ]; then
            print_error "Please specify a C++ standard"
            show_help
            exit 1
        fi
        set_cpp_standard "$2"
        ;;
    "info")
        if [ -z "$2" ]; then
            print_error "Please specify a C++ standard"
            show_help
            exit 1
        fi
        show_standard_info "$2"
        ;;
    "check")
        if [ -z "$2" ]; then
            print_error "Please specify a C++ standard"
            show_help
            exit 1
        fi
        check_compiler_support "$2"
        ;;
    "current")
        show_current_standard
        ;;
	"build")
        if [ -z "$2" ]; then
            print_error "Please specify a C++ standard"
            show_help
            exit 1
        fi
        build_with_standard "$2"
        ;;
    "list")
        list_standards
        ;;
    "--help"|"-h"|"help")
        show_help
        ;;
    "")
        # No arguments - show current status
        show_current_standard
        ;;
    *)
        # Try to interpret as a standard number
        if [[ "$1" =~ ^[0-9]+$ ]] && [[ -n "${CPP_STANDARDS[$1]}" ]]; then
            set_cpp_standard "$1"
        else
            print_error "Unknown command: $1"
            show_help
            exit 1
        fi
        ;;
esac
